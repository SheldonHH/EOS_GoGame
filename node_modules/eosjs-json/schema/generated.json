{
  "account_name": "name",
  "permission_name": "name",
  "func_name": "name",
  "message_name": "fixed_string32",
  "type_name": "fixed_string32",
  "account_permission": {
    "fields": {
      "account": "account_name",
      "permission": "permission_name"
    }
  },
  "message": {
    "fields": {
      "code": "account_name",
      "type": "func_name",
      "authorization": "account_permission[]",
      "data": "bytes"
    },
    "docs": {
      "code": "the contract defining the primary code to execute for code/type",
      "type": "the action to be taken",
      "authorization": "the accounts and permission levels provided",
      "data": "opaque data processed by code"
    }
  },
  "account_permission_weight": {
    "fields": {
      "permission": "account_permission",
      "weight": "uint16"
    }
  },
  "transaction": {
    "fields": {
      "ref_block_num": "uint16",
      "ref_block_prefix": "uint32",
      "expiration": "time",
      "scope": "account_name[]",
      "read_scope": "account_name[]",
      "messages": "message[]"
    },
    "docs": {
      "scope": "the data may be accessed while processing this transaction"
    }
  },
  "signed_transaction": {
    "base": "transaction",
    "fields": {
      "signatures": "signature[]"
    }
  },
  "key_permission_weight": {
    "fields": {
      "key": "public_key",
      "weight": "uint16"
    }
  },
  "authority": {
    "fields": {
      "threshold": "uint32",
      "keys": "key_permission_weight[]",
      "accounts": "account_permission_weight[]"
    }
  },
  "blockchain_configuration": {
    "fields": {
      "max_blk_size": "uint32",
      "target_blk_size": "uint32",
      "max_storage_size": "uint64",
      "elected_pay": "share_type",
      "runner_up_pay": "share_type",
      "min_eos_balance": "share_type",
      "max_trx_lifetime": "uint32",
      "auth_depth_limit": "uint16",
      "max_trx_runtime": "uint32",
      "in_depth_limit": "uint16",
      "max_in_msg_size": "uint32",
      "max_gen_trx_size": "uint32"
    },
    "docs": {
      "in_depth_limit": "inline depth limit",
      "max_in_msg_size": "max inline message size"
    }
  },
  "type_def": {
    "fields": {
      "new_type_name": "type_name",
      "type": "type_name"
    }
  },
  "action": {
    "fields": {
      "action_name": "name",
      "type": "type_name"
    }
  },
  "table": {
    "fields": {
      "table_name": "name",
      "index_type": "type_name",
      "key_names": "field_name[]",
      "key_types": "type_name[]",
      "type": "type_name"
    },
    "docs": {
      "table_name": "the name of the table",
      "index_type": "the kind of index, i64, i128i128, etc",
      "key_names": "names for the keys defined by keytype",
      "key_types": "the meaning / type of key parameters, how to convert binary key to json",
      "type": "the meaning / type of the binary data stored in this table"
    }
  },
  "abi": {
    "fields": {
      "types": "type_def[]",
      "structs": "struct_t[]",
      "actions": "action[]",
      "tables": "table[]"
    }
  },
  "transfer": {
    "fields": {
      "from": "account_name",
      "to": "account_name",
      "amount": "uint64",
      "memo": "string"
    },
    "docs": {
      "from": "may not be the message.sender if message.sender has delegated authority by from"
    }
  },
  "nonce": {
    "fields": {
      "value": "string"
    }
  },
  "lock": {
    "fields": {
      "from": "account_name",
      "to": "account_name",
      "amount": "share_type"
    }
  },
  "unlock": {
    "fields": {
      "account": "account_name",
      "amount": "share_type"
    }
  },
  "claim": {
    "fields": {
      "account": "account_name",
      "amount": "share_type"
    }
  },
  "newaccount": {
    "fields": {
      "creator": "account_name",
      "name": "account_name",
      "owner": "authority",
      "active": "authority",
      "recovery": "authority",
      "deposit": "asset"
    }
  },
  "setcode": {
    "fields": {
      "account": "account_name",
      "vm_type": "uint8",
      "vm_version": "uint8",
      "code": "bytes",
      "code_abi": "abi"
    },
    "docs": {
      "account": "the account that is handling the message",
      "vm_type": "the virtual machine type",
      "vm_version": "the virtual machine version",
      "code": "the apply",
      "code_abi": "the interface description of the code"
    }
  },
  "setproducer": {
    "fields": {
      "name": "account_name",
      "key": "public_key",
      "configuration": "blockchain_configuration"
    }
  },
  "okproducer": {
    "fields": {
      "voter": "account_name",
      "producer": "account_name",
      "approve": "int8"
    },
    "docs": {
      "voter": "The account casting a vote",
      "producer": "The producer being voted on",
      "approve": "1 to approve, or 0 to disapprove"
    }
  },
  "setproxy": {
    "fields": {
      "stakeholder": "account_name",
      "proxy": "account_name"
    },
    "docs": {
      "stakeholder": "The account with stake to be proxied",
      "proxy": "The account to cast votes with stakeholder's stake weight"
    }
  },
  "updateauth": {
    "fields": {
      "account": "account_name",
      "permission": "permission_name",
      "parent": "permission_name",
      "new_authority": "authority"
    }
  },
  "deleteauth": {
    "fields": {
      "account": "account_name",
      "permission": "permission_name"
    }
  },
  "linkauth": {
    "fields": {
      "account": "account_name",
      "code": "account_name",
      "type": "func_name",
      "requirement": "permission_name"
    },
    "docs": {
      "account": "The account to require permissions for",
      "code": "The contract to require permissions to invoke",
      "requirement": "The permission name to require"
    }
  },
  "unlinkauth": {
    "fields": {
      "account": "account_name",
      "code": "account_name",
      "type": "func_name"
    },
    "docs": {
      "account": "The account to require permissions for",
      "code": "The contract to require permissions to invoke"
    }
  }
}
