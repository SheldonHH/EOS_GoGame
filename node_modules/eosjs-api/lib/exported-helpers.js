'use strict';

module.exports = {

  // Under "api:" all functions must take api as their 1st parameter
  api: {
    createTransaction: createTransaction
  }

  /**
    Consult the blockchain and gather information for use in a new signed transaction.
    For Transaction as Proof of Stake (TaPOS), 32 bits of a recent block Id is included.
  
    @arg {number} expireInSeconds - How many seconds until expiration
    @arg {function} callback - (error, headers)
    @typedef {object} headers - {ref_block_num, ref_block_prefix, expiration}
  */
};function createTransaction(api) {
  var expireInSeconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;
  var callback = arguments[2];

  if (!callback) {
    throw new TypeError('callback parameter is required');
  }
  api.getInfo(checkError(callback, function (info) {
    var chainDate = new Date(info.head_block_time + 'Z');

    // Back-up 3 blocks to help avoid mini-forks.
    var ref_block_num = info.head_block_num - 3 & 0xFFFF;

    api.getBlock(info.head_block_num - 3, checkError(callback, function (block) {
      var expiration = new Date(chainDate.getTime() + expireInSeconds * 1000);
      var headers = {
        ref_block_num: ref_block_num,
        ref_block_prefix: block.refBlockPrefix || block.ref_block_prefix,
        expiration: expiration.toISOString().split('.')[0],
        scope: [],
        read_scope: [],
        messages: [],
        signatures: []
      };
      callback(null, headers);
    }));
  }));
}

var checkError = function checkError(parentErr, parrentRes) {
  return function (error, result) {
    if (error) {
      parentErr(error);
    } else {
      parrentRes(result);
    }
  };
};